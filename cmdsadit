#!/usr/bin/python -B
#!/usr/bin/env python -B
from __future__ import print_function, division
import re
import sys
import os
import argparse

ROOT = os.environ.get('SADIT_ROOT')
if ROOT is None:
    print('Please set <SADIT_ROOT> variable in bash.')
    sys.exit()
if not ROOT.endswith('sadit'):
    print('Please set <SADIT_ROOT> path variable correctly. '
          'Please change the name of the <ROOT> folder to be sadit. Other name '
            'will cause import problem')
    sys.exit()

os.environ['EXPORT_ABNORMAL_FLOW_PARA_FILE'] = ROOT + '/Share/ano_flow_para.txt'
os.environ['SVM_FOLDER'] = ROOT + '/tools/libsvm-3.12'
sys.path.insert(0, ROOT)
upper_folder = re.sub('sadit', '', ROOT)
sys.path.insert(0, upper_folder)

# Get experiment options
import Experiment
exper_ops = [d for d in dir(Experiment) if not d.startswith('__')
             and not d[0].isupper()]

parser = argparse.ArgumentParser(description='sadit', add_help=False)

parser.add_argument('experiment', default=None, nargs='?',
        help="""type ./cmdsadit <exper> -h for help of an experiment;
        available experiments are [%s]"""
        %(' | '.join(exper_ops)))

parser.add_argument('--profile', default=None,
        help= """profile the program """)

parser.add_argument('-h', '--help', default=False, action='store_true',
        help="""print help message and exit""")

args, res_args = parser.parse_known_args()


#####################################################
###      Print Help Message
#####################################################

def get_exper(exper_name, argv):
    try:
        exper = getattr(Experiment, exper_name.lower())(argv)
    except AttributeError:
        raise Exception('invalid experiment, available experiments %s ' % (' '.join(exper_ops)))
    return exper

def print_exper_help(exper, res_args=[]):
    get_exper(args.experiment, ['-h'] + res_args)

if len(sys.argv) == 1:
    parser.print_help()
    sys.exit()

if args.help:
    if args.experiment:
        print_exper_help(args.experiment, res_args)
    else:
        parser.print_help()
    sys.exit()

def main(args, res_args):
    """ Execute the experiment """
    try:
        get_exper(args.experiment, res_args).run()
    except:
        print('Probabably you forgot to specify some options?'
                ' run cmdsadit <exper> -h for more information.')
        import traceback
        tb = traceback.format_exc()
        print(tb)
        # print(e)

if args.profile:
    import cProfile
    command = """main(args, res_args)"""
    cProfile.runctx( command, globals(), locals(), filename=args.profile)
else:
    main(args, res_args)
