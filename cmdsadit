#!/home/jzh/anaconda2/bin/python

from __future__ import print_function, division
import sys
import os
import argparse
ROOT = os.environ.get('SADIT_ROOT')
if ROOT is None:
    print('please set <SADIT_ROOT> variable in bash')
    sys.exit()
if not ROOT.endswith('sadit'):
    print('please set <SADIT_ROOT> path variable correctly; '
          'Please change the name of the <ROOT> folder to sadit. Other name '
            'will cause import problem')
    sys.exit()

os.environ['EXPORT_ABNORMAL_FLOW_PARA_FILE'] = ROOT + '/Share/ano_flow_para.txt'
os.environ['SVM_FOLDER'] = ROOT + '/tools/libsvm-3.12'
sys.path.insert(0, ROOT)
sys.path.insert(0, ROOT.rstrip('sadit'))

# Get experiment options
exper_ops = [f_name[:-3] for f_name in os.listdir(ROOT + '/Experiment/')
             if f_name.lower().endswith('py') and not f_name.startswith('__')]

# from Detector.API import detector_map

parser = argparse.ArgumentParser(description='sadit', add_help=False)
# parser = argparse.ArgumentParser(description='sadit')
# parser.add_argument('-e', '--experiment', default='DetectExper')

# parser.add_argument('-c', '--config', default=None,
#         help="""a configuration script describing the network network, normal
#         traffic and anomalies""")

# parser.add_argument('-e', '--experiment', default=None,
#         help="""print ./run.py -e <exper> -h for help of a experiment
#         Avaliable experiments are [%s]"""
#         %(' | '.join(exper_ops)))

parser.add_argument('experiment', default=None, nargs='?',
        help="""print ./sadit <exper> -h for help of a experiment
        Avaliable experiments are [%s]"""
        %(' | '.join(exper_ops)))

parser.add_argument('--profile', default=None,
        help= """profile the program """)

# parser.add_argument('-hm', '--help_method', default=None,
#         help="""print the detailed help message for a method. Avaliable method [%s]"""
        # %(' | '.join(detector_map.keys())))
# parser.add_argument('-he', '--help_exper', default=None,
        # help="""print the detailed help message for an experiment. Avaliable experiments are [%s]"""
        # %(' | '.join(exper_ops)))

parser.add_argument('-h', '--help', default=False, action='store_true',
        help="""print help message and exit""")

args, res_args = parser.parse_known_args()


#####################################################
###      Print Help Message
#####################################################
def print_exper_help(exper, res_args=[]):
    exec('from Experiment.%s import %s'%(exper, exper))
    argv = ['-h'] + res_args
    exper = locals()[exper](argv)

if len(sys.argv) == 1:
    parser.print_help()
    sys.exit()

if args.help:
    if args.experiment:
        print_exper_help(args.experiment, res_args)
    else:
        parser.print_help()
    sys.exit()

# if args.help_exper:
    # print_exper_help(args.help_exper)
    # sys.exit()

# if args.help_method:
#     from Detector.API import print_detector_help
#     print_detector_help(args.help_method)
#     sys.exit()

def main(args, res_args):
    """ Execute the experiment """
    if args.experiment not in exper_ops:
        raise Exception('invalid experiment, '
                'experiments must be defined in ./Experiment/ folder')
        # exec_exper(args, res_args)
    exec('from Experiment.%s import %s'%(args.experiment, args.experiment))
    exper = locals()[args.experiment](res_args)
    try:
        exper.run()
    except KeyError:
        print('Probabably you forget to specify some options?'
                ' run sadit <exper> -h for more information.')
        import traceback
        tb = traceback.format_exc()
        print(tb)
        # print(e)

if args.profile:
    import cProfile
    command = """main(args, res_args)"""
    cProfile.runctx( command, globals(), locals(), filename=args.profile)
else:
    main(args, res_args)
